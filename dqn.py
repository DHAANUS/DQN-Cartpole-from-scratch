# -*- coding: utf-8 -*-
"""DQN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B2tHHQ1EnfX7_4uOxf3ehoDwCb_LWu73
"""

import random
import numpy as np
import gymnasium as gym
import torch
import torch.nn as nn
import torch.optim as optim
from collections import deque

class DQN(nn.Module):
  def __init__(self, state_dim, action_dim):
    super(DQN, self).__init__()
    self.fc1 = nn.Linear(state_dim, 128)
    self.fc2 = nn.Linear(128, 128)
    self.fc3 = nn.Linear(128, action_dim)

  def forward(self, x):
    x = torch.relu(self.fc1(x))
    x = torch.relu(self.fc2(x))
    return self.fc3(x)

class ReplayBuffer:
  def __init__(self, capacity=100000):
    self.buffer = deque(maxlen=capacity)

  def push(self, state, action, reward, next_state, done):
    self.buffer.append((state, action, reward, next_state, done))

  def sample(self, batch_size):
    batch = random.sample(self.buffer, batch_size)
    states, actions , rewards, next_states, dones = map(np.array, zip(*batch))
    return states, actions, rewards, next_states, dones
  def __len__(self):
    return len(self.buffer)

env = gym.make('CartPole-v1')
state_dim = env.observation_space.shape[0]
action_dim = env.action_space.n

gamma = 0.99
lr = 1e-3
batch_size = 64
epsilon = 1.0
epsilon_min = 0.001
epsilon_decay = 0.997
target_update = 10

policy_net = DQN(state_dim, action_dim)

policy_net

target_net = DQN(state_dim, action_dim)

target_net

target_net.load_state_dict(policy_net.state_dict())
###########

optimizer = optim.Adam(policy_net.parameters(), lr=lr)

policy_net.parameters()

optimizer

replay_buffer = ReplayBuffer()

replay_buffer

num_ep = 900

for ep in range(num_ep):
  state = env.reset()[0]
  total_reward = 0

  while True:
    if random.random()<epsilon:
      action = env.action_space.sample()
    else:
      with torch.no_grad():
        state_t = torch.FloatTensor(state).unsqueeze(0)
        q_values = policy_net(state_t)
        action = q_values.argmax().item()
    next_state, reward, done, _, _ = env.step(action)
    replay_buffer.push(state, action, reward, next_state, done)
    state = next_state
    total_reward +=reward
    if len(replay_buffer)>batch_size:
      states, actions, rewards, next_states, dones = replay_buffer.sample(batch_size)

      states_t = torch.FloatTensor(states)
      actions_t = torch.LongTensor(actions).unsqueeze(1)
      rewards_t = torch.FloatTensor(rewards)
      next_states_t = torch.FloatTensor(next_states)
      dones_t = torch.FloatTensor(dones)

      q_values = policy_net(states_t).gather(1, actions_t).squeeze(1)

      with torch.no_grad():
        next_q_values = target_net(next_states_t).max(1)[0]
        targets = rewards_t + gamma*next_q_values * (1-dones_t)

      loss = nn.MSELoss()(q_values, targets)


      optimizer.zero_grad()
      loss.backward()
      optimizer.step()
    if done:
      break
  epsilon = max(epsilon_min, epsilon*epsilon_decay)

  if ep%target_update==0:
    target_net.load_state_dict(policy_net.state_dict())

  print(f"Episode {ep}, Total Reward: {total_reward}, Epsilon: {epsilon:.2f}" )

import gymnasium as gym
from gymnasium.wrappers import RecordVideo
import torch

env = gym.make("CartPole-v1", render_mode="rgb_array")
env = RecordVideo(env, video_folder="videos", name_prefix="dqn_demo")

obs, info = env.reset(seed=0)
policy_net.eval()
terminated = truncated = False
while not (terminated or truncated):
    with torch.no_grad():
        action = policy_net(torch.as_tensor(obs, dtype=torch.float32).unsqueeze(0)).argmax(1).item()
    obs, r, terminated, truncated, info = env.step(action)

env.close()
print("Saved  ./videos/")

import shutil
from google.colab import files

zip_path = shutil.make_archive("videos", "zip", "videos")

files.download(zip_path)

